syntax = "proto3";

package blog;

// output of the generated file/code
option go_package = "./v1/pb/blog";

message Address {
  string id = 1;
  string city = 2;
  string country = 3;
  string zip_code = 4;
  string postal_address = 5;
  string created = 6;
  string updated = 7;
}

message Blog {
  reserved  4, 7;
  reserved "author_id", "authors";
  string id = 1;
  string title = 2;
  string content = 3;
  // repeated Author author_id = 4;
  string created = 5;
  string updated = 6;
  // repeated Author authors = 7;
  repeated string writer_email = 8;
  repeated Author author_details = 9;
}

message Author {
  reserved 6;
  reserved "blog_id";
  string id = 1;
  string first_name = 2;
  string last_name = 3;
  string email = 4;
  Address address = 5;
  // repeated Blog blog_id = 6;
  string created = 7;
  string updated = 8;
}

// Author action messages
message CreateAuthorRequest {
  Author author = 1;
}

message CreateAuthorResponse {
  Author author = 1; // will contain an ID of the created Author if successful
}

message FetchAuthorRequest {
  string author_id = 1;
}

message FetchAuthorResponse {
  Author author = 1;
}

message UpdateAuthorRequest {
  Author author = 1;
}

message UpdateAuthorResponse {
  Author author = 1;
}

message DeleteAuthorRequest {
  string author_id = 1;
}

message DeleteAuthorResponse {
  string delete_response = 1;
}

message AllAuthorsRequest {

}

message AllAuthorsResponse {
  Author author = 1;
}

// Blog action messages
message CreateBlogRequest {
  Blog blog = 1;
}

message CreateBlogResponse {
  Blog blog = 1; // will have a blog id
}

message ReadBlogRequest {
  string blog_id = 1;
}

message ReadBlogResponse {
  Blog blog = 1;
}

message UpdateBlogRequest {
  Blog blog = 1;
}

message UpdateBlogResponse {
  Blog blog = 1;
}

message DeleteBlogRequest {
  string blog_id = 1;
}

message DeleteBlogResponse {
  string delete_response = 1;
}

message AllBlogRequest {

}

message AllBlogResponse {
  Blog blog = 1;
}

service BlogService {
  // A unary RPC to create an author
  rpc CreateAuthor (CreateAuthorRequest) returns (CreateAuthorResponse){};
  // A unary RPC to fetch a single author, return NOTFOUND if not found
  rpc FetchAuthor (FetchAuthorRequest) returns (FetchAuthorResponse){};
  // A unary RPC to update an author, return NOTFOUND if not found
  rpc UpdateAuthor (UpdateAuthorRequest) returns (UpdateAuthorResponse){};
  // A unary RPC to delete an author, return NOTFOUND if not found
  rpc DeleteAuthor (DeleteAuthorRequest) returns (DeleteAuthorResponse){};
  // A server streaming RPC to return all authors
  rpc AllAuthors (AllAuthorsRequest) returns (stream AllAuthorsResponse){};

  // A unary RPC to create a blog
  rpc CreateBlog (CreateBlogRequest) returns (CreateBlogResponse){};
  // A unary RPC to fetch a single blog
  rpc FetchBlog (ReadBlogRequest) returns (ReadBlogResponse){};
  // A unary RPC to update a blog, return NOTFOUND if not found
  rpc UpdateBlog (UpdateBlogRequest) returns (UpdateBlogResponse){};
  // A unary RPC to delete a blog, return NOTFOUND if not found
  rpc DeleteBlog (DeleteBlogRequest) returns (DeleteBlogResponse){};
}
